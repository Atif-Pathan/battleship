/**
 * Initializes the board in the DOM by populating the container with cell elements.
 * For player boards, we create non-clickable divs (so the ships are visible).
 * For enemy boards, we create clickable buttons (so the user can attack).
 *
 * @param {string} containerId - The id of the DOM element where the board gets created.
 * @param {('player'|'enemy')} type - The type of board. "player" boards use <div> cells; "enemy" boards use <button> cells.
 */
export function initBoard(gridId, isEnemyBoard) {
  const grid = document.getElementById(gridId);
  if (!grid) {
    console.error(`Grid with ID '${gridId}' not found.`);
    return;
  }

  // 1) Clear existing content
  grid.innerHTML = "";

  // 2) Ensure this container can host an absolutely positioned overlay
  //    If you're already using Tailwind classes on this container, 
  //    just add "relative" (or do it here with classList).
  grid.classList.add("relative");

  // 3) Generate 100 cells in a row-major order
  for (let i = 0; i < 100; i++) {
    let cell;
    if (isEnemyBoard) {
      // Enemy board => clickable button
      cell = document.createElement("button");
      cell.classList.add("enemy-cell");
      cell.dataset.index = i;
      cell.addEventListener("click", () => handleEnemyCellClick(i));
    } else {
      // Player board => static div
      cell = document.createElement("div");
      cell.classList.add("player-cell");
    }
    grid.appendChild(cell);
  }

  // 4) Create and append the overlay element (absolutely positioned)
  const overlay = document.createElement("div");
  // For consistency, name it something like "player-overlay" or "enemy-overlay"
  overlay.id = gridId.replace("grid", "overlay");
  // Tailwind classes for absolute positioning + no pointer interference
  overlay.classList.add(
    "pointer-events-none",
    "absolute",
    "top-0",
    "left-0",
    "w-full",
    "h-full"
  );

  grid.appendChild(overlay);
}

// Example click handler for enemy board cells
function handleEnemyCellClick(index) {
  console.log(`Enemy cell ${index} clicked!`);
  // Add further game logic here
}

/**
 * Renders a gameboard (domain object) to the DOM.
 * It updates the cell elements based on the state of gameboard.board.
 * For example, it may add a class if a cell contains a ship, if itâ€™s marked as "M", etc.
 *
 * @param {object} gameboard - The GameBoard instance having a 10x10 board property.
 * @param {string} containerId - The id of the container where cells were initialized.
 */
export function renderBoard(gameBoard, gridId, overlayId) {
  const grid = document.getElementById(gridId);
  const overlay = document.getElementById(overlayId);

  if (!grid || !overlay) return;

  // 1. Clear any existing ship overlays
  overlay.innerHTML = "";

  // 2. Mark cells (hits & misses)
  for (let row = 0; row < 10; row++) {
    for (let col = 0; col < 10; col++) {
      const index = row * 10 + col;
      const cellEl = grid.children[index];
      const cellData = gameBoard.board[row][col];

      // Remove old classes
      cellEl.classList.remove("cell-hit", "cell-miss");

      // Miss => "M"
      if (cellData === "M") {
        cellEl.classList.add("cell-miss");
      }
      // Ship => { ship, hit: bool }
      else if (cellData && cellData.ship) {
        if (cellData.hit) {
          cellEl.classList.add("cell-hit");
        }
        // else not hit, do nothing special for the cell-based approach
      }
    }
  }

  // 3. Add an absolute overlay for each ship
  gameBoard.ships.forEach(({ ship, rowStart, colStart }) => {
    const shipDiv = document.createElement("div");

    const cellPercent = 10; // each cell is 10% in a 10x10
    const top = rowStart * cellPercent;
    const left = colStart * cellPercent;

    let width, height;
    if (ship.orientation === "horizontal") {
      width = ship.length * cellPercent;
      height = cellPercent;
    } else {
      width = cellPercent;
      height = ship.length * cellPercent;
    }

    shipDiv.style.top = `${top}%`;
    shipDiv.style.left = `${left}%`;
    shipDiv.style.width = `${width}%`;
    shipDiv.style.height = `${height}%`;
    shipDiv.classList.add("ship-overlay-base"); // from your CSS

    // If the ship is sunk, override border color
    if (ship.sunk) {
      shipDiv.classList.add("ship-overlay-sunk");
    }

    overlay.appendChild(shipDiv);
  });
}